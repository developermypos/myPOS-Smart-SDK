apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.bmuschko.nexus'

def versionNumber = 24
def versionString = "1.0.4"

ext {
    bintrayRepo = 'myPOSSmartSDK'
    bintrayName = 'mypossmartsdk'

    publishedGroupId = 'com.mypos'
    libraryName = 'myPOS-Smart-SDK'
    artifact = 'mypossmartsdk'

    libraryDescription = 'This repository provides a guidance on integrating an Android app with a myPOS Smart device. Once integrated, ' +
            'the app will be able to communicate with the core device components in order to accept card payments (including but not limited to VISA,' +
            ' Mastercard, UnionPay International, JCB, Bancontact). myPOS-Smart-SDK complÐµments a Smart POS terminal in order to initiate transaction,' +
            ' complete all steps for processing payment, make refund to the customer card account and print a custom bill slip using the device printer.' +
            ' The built-in functionalities of myPOS-Smart-SDK allow you to send Payment Requests, manage operations for the first and second SAM component the myPOS Smart device has and print bitmap image integrated to the receipt (e.g. QR Code).'

    siteUrl = 'https://github.com/developermypos/myPOS-Smart-SDK'
    gitUrl = 'https://github.com/developermypos/myPOS-Smart-SDK.git'

    libraryVersion = versionString

    developerId = 'mypos'
    developerName = 'myPOS Developers'
    developerEmail = 'devrel@mypos.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode versionNumber
        version versionString
        versionName versionString
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
//                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.13.2'
}

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
//    archives javadocJar
    archives sourcesJar
}


modifyPom {
    project {
        name libraryName
        description libraryDescription
        url siteUrl
        inceptionYear '2021'

        scm {
            url siteUrl
            connection gitUrl
            developerConnection gitUrl
        }

        licenses {
            license {
                name licenseName
                url licenseUrl
                distribution 'repo'
            }
        }

        developers {
            developer {
                id developerId
                name developerName
                email developerEmail
            }
        }
    }
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

//
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//
//bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
//
//    configurations = ['archives']
//    pkg {
//        repo = bintrayRepo
//        name = bintrayName
//        desc = libraryDescription
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = allLicenses
//        publish = true
//        version {
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
//            }
//        }
//    }
//}
